package flannel

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"time"
)

type APIClient struct {
	httpClient       *http.Client
	logger           Logger
	debugModeEnabled bool
}

type Logger interface {
	Log(args ...interface{})
}

type CreateFundraiserParams struct {

	// AccessToken as provided by Facebook Login for the user creating the fundraiser.
	AccessToken string

	// Charity ID is the Facebook Charity ID
	CharityID string

	// Title of the Facebook Fundraiser, can be up to 70 characters long.
	Title string

	// Description of the Facebook Fundraiser, can be up to 50k characters long.
	Description string

	// Goal in currencyâ€™s smallest unit. Fundraisers currently support only whole values, so for currencies with cents like USD,
	// you must round to an integer number and then multiply by 100 to get the value in cents. For zero-decimal currencies like JPY,
	// simply provide the integer amount without multiplying by 100.
	Goal int

	// Currency ISO 4127 code for the goal amount.
	Currency string

	// EndTime is a timestamp of when the fundraiser will stop accepting donations. Must be within 5 years from now.
	EndTime time.Time

	// ExternalID is generated by you to identify the fundraiser in your system.
	ExternalID string
}

func CreateAPIClient(options ...func(*APIClient) error) (APIClient, error) {
	c := APIClient{
		httpClient: &http.Client{Timeout: time.Second * 20},
	}
	for _, option := range options {
		if err := option(&c); err != nil {
			return c, err
		}
	}
	return c, nil
}

func WithLogger(logger Logger, debug bool) func(*APIClient) error {
	return func(c *APIClient) error {
		c.logger = logger
		c.debugModeEnabled = debug
		return nil
	}
}

func (c APIClient) CreateFundraiser(params CreateFundraiserParams, options ...func(*multipart.Writer) error) (id string, status int, err error) {

	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)
	// add required fields
	fields := map[string]string{
		"charity_id":      params.CharityID,
		"name":            params.Title,
		"description":     params.Description,
		"goal_amount":     fmt.Sprintf("%d", params.Goal),
		"currency":        params.Currency,
		"end_time":        fmt.Sprintf("%d", params.EndTime.Unix()),
		"external_id":     params.ExternalID,
		"fundraiser_type": "person_for_charity",
	}
	for k, v := range fields {
		err = writer.WriteField(k, v)
		if err != nil {
			break
		}
	}
	if err != nil {
		return "", 0, err
	}
	// add optional fields
	for _, option := range options {
		if err := option(writer); err != nil {
			return "", 0, err
		}
	}
	err = writer.Close()
	if err != nil {
		return "", 0, err
	}
	var req *http.Request
	endpoint := fmt.Sprintf("https://graph.facebook.com/v2.8/me/fundraisers?access_token=%s", params.AccessToken)
	req, err = http.NewRequest("POST", endpoint, body)
	if err != nil {
		return "", 0, fmt.Errorf("error preparing request %v", err)
	}
	req.Header.Set("Content-Type", writer.FormDataContentType())

	var res *http.Response
	res, err = c.httpClient.Do(req)

	var resBody []byte
	status, resBody, err = c.readResponse(req, res, http.StatusOK)

	// TODO unmarshal id
	return string(resBody), status, nil
}

func WithFundraiserCoverPhoto(name string, content io.Reader) func(*multipart.Writer) error {
	return func(w *multipart.Writer) error {
		part, err := w.CreateFormFile("cover_photo", name)
		if err != nil {
			return err
		}
		_, err = io.Copy(part, content)
		return err
	}
}

func WithFundraiserField(name string, value string) func(*multipart.Writer) error {
	return func(w *multipart.Writer) error {
		return w.WriteField(name, value)
	}
}

func (c APIClient) readResponse(req *http.Request, res *http.Response, expectedstatus int) (status int, body []byte, err error) {
	if res != nil {
		status = res.StatusCode
		if res.ContentLength > 0 || res.ContentLength == -1 { // -1 represents unknown content length
			body, err = ioutil.ReadAll(res.Body)
			if err == nil {
				// Defer closing of underlying connection so it can be re-used...
				defer res.Body.Close()
			}
		}
	}
	defer func() {
		if c.logger != nil && (c.debugModeEnabled || err != nil) {
			if len(body) > 0 {
				c.logger.Log(fmt.Sprintf("facebook api %s request to %s returned %d %s\n", req.Method, req.URL.String(), status, string(body)))
			} else {
				c.logger.Log(fmt.Sprintf("facebook api %s request to %s returned %d\n", req.Method, req.URL.String(), status))
			}
		}
	}()
	if err != nil {
		err = fmt.Errorf("error reading response %v", err)
	}
	if status != expectedstatus {
		err = fmt.Errorf("invalid response %d", status)
	}
	return status, body, err
}
